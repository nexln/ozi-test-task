{"version":3,"sources":["api/authAPI.ts","utils/error-utils.ts","app/app-reducer.ts","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/User/user-reducer.ts","features/User/User.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","authAPI","data","post","get","headers","cookies","handleServerAppError","dispatch","message","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","response","slice","createSlice","name","initialState","isInitialized","reducers","state","action","payload","setIsInitializedAC","appReducer","reducer","actions","initializeAppTC","then","res","setIsLoggedInAC","value","catch","finally","Cookies","isLoggedIn","authReducer","Login","useSelector","auth","useDispatch","formik","useFormik","initialValues","email","password","validate","values","errors","test","onSubmit","resetForm","set","tokenType","path","accessToken","setTimeout","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","Button","variant","id","setUserDataAC","userReducer","User","userName","user","userId","userEmail","useEffect","Alert","props","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","position","top","textAlign","width","CircularProgress","className","AppBar","Toolbar","IconButton","edge","aria-label","onClick","remove","LinearProgress","Container","fixed","exact","render","from","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3f79f75b.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {cookies} from \"../features/Login/auth-reducer\";\r\n\r\nconst settings = {\r\n  withCredentials: true,\r\n}\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://localhost:3000/api',\r\n  ...settings\r\n})\r\n\r\nexport type ResData = {\r\n  tokenType: string\r\n  expiresAt: string\r\n  accessToken: string\r\n  refreshToken: number\r\n}\r\n\r\nexport type MineData = {\r\n  id: number\r\n  name: string,\r\n  email: string\r\n}\r\n\r\nexport type AuthLoginType = {\r\n  email: string,\r\n  password: string,\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n  message: string\r\n  data: D\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: AuthLoginType) {\r\n    return instance.post<ResponseType<ResData>>('/auth/user', data)\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<MineData>>('/tager/user/profile', {\r\n      headers: {\r\n        'Authorization': `${cookies.get('tokenType')} ${cookies.get('accessToken')}`\r\n      }\r\n    })\r\n  }\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from \"../api/authAPI\";\r\n\r\n\r\nexport type ErrorType = {\r\n  response: {\r\n    data: {\r\n      message: string\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const handleServerAppError = (data: ResponseType, dispatch: Dispatch) => {\r\n  if (data.message.length) {\r\n    dispatch(setAppErrorAC({error: data.message}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: ErrorType , dispatch: Dispatch) => {\r\n  dispatch(setAppErrorAC({error: error.response.data.message}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n// type ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  isInitialized: false as boolean,\r\n  error: null as null | string,\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n      state.status = action.payload.status\r\n    },\r\n    setIsInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n      state.isInitialized = action.payload.isInitialized\r\n    },\r\n    setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n      state.error = action.payload.error\r\n    },\r\n  }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC} = slice.actions\r\nexport const {setAppErrorAC} = slice.actions\r\nexport const {setIsInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(res => {\r\n      if (res.data.data) {\r\n        dispatch(setIsInitializedAC({isInitialized: true}))\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n    .finally(() => {\r\n      dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {AuthLoginType, authAPI} from \"../../api/authAPI\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport Cookies from \"universal-cookie\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n}\r\nexport const cookies = new Cookies();\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n      state.isLoggedIn = action.payload.value\r\n    }\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.data) {\r\n        cookies.set('tokenType', res.data.data.tokenType, {path: '/'});\r\n        cookies.set('accessToken', res.data.data.accessToken, {path: '/'});\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setIsLoggedInAC({value: false}))\r\n  cookies.remove('tokenType')\r\n  cookies.remove('accessToken')\r\n}","import React from 'react'\r\nimport {FormControl, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"../../app/app-reducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length <= 2) {\r\n        errors.password = 'Too short password'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      formik.resetForm()\r\n      dispatch(loginTC(values))\r\n      setTimeout(() => {\r\n        dispatch(initializeAppTC())\r\n      }, 2000)\r\n\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'}/>\r\n  }\r\n\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>Use common test account credentials:</p>\r\n            <p>Email: user@ozitag.com</p>\r\n            <p>Password: user</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n\r\n            />\r\n            {\r\n              formik.touched.email && formik.errors.email\r\n                ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null\r\n            }\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {\r\n              formik.touched.password && formik.errors.password\r\n                ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null\r\n            }\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI} from \"../../api/authAPI\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type UserStateType = {\r\n  id: number,\r\n  email: string,\r\n  name: string\r\n}\r\n\r\nconst initialState: UserStateType = {\r\n  id: 1,\r\n  email: '',\r\n  name: ''\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'todolist',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setUserDataAC: (state, action: PayloadAction<UserStateType>) => {\r\n      state.id = action.payload.id\r\n      state.email = action.payload.email\r\n      state.name = action.payload.name\r\n    },\r\n  }\r\n})\r\n\r\nexport const userReducer = slice.reducer\r\nexport const {setUserDataAC} = slice.actions\r\n\r\nexport const fetchUserDataTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me()\r\n      .then((res) => {\r\n        if (res.data.data) {\r\n          dispatch(setAppStatusAC({status: 'succeeded'}))\r\n          dispatch(setUserDataAC({email: res.data.data.email, name: res.data.data.name, id: res.data.data.id}))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {fetchUserDataTC} from \"./user-reducer\";\r\n\r\nexport const User = () => {\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const userName = useSelector<AppRootStateType, string>(state => state.user.name)\r\n  const userId = useSelector<AppRootStateType, number>(state => state.user.id)\r\n  const userEmail = useSelector<AppRootStateType, string>(state => state.user.email)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n    dispatch(fetchUserDataTC())\r\n  }, [isLoggedIn, dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"}/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>{userName}</p>\r\n      <p>{userId}</p>\r\n      <p>{userEmail}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    dispatch(setAppErrorAC({error: null}))\r\n  }\r\n\r\n  return (\r\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Login} from \"../features/Login/Login\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Button, CircularProgress} from '@material-ui/core';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {AppBar} from '@material-ui/core';\nimport {IconButton} from '@material-ui/core';\nimport {Toolbar} from '@material-ui/core';\nimport {LinearProgress} from '@material-ui/core';\nimport {Container} from '@material-ui/core';\nimport {User} from \"../features/User/User\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\n\nexport function App() {\n\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n  let dispatch = useDispatch()\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n\n  useEffect(() => {\n    dispatch(initializeAppTC())\n  }, [dispatch])\n\n  if (!isInitialized) {\n    return <div\n      style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n      <CircularProgress/>\n    </div>\n  }\n\n  const logout = () => {\n    dispatch(logoutTC())\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" color={\"primary\"}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          </IconButton>\n          {isLoggedIn && <Button color={\"inherit\"} onClick={logout}>Log out</Button>}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress color={'secondary'}/>}\n      </AppBar>\n      <Container fixed>\n        <Switch>\n          <Route exact path={'/'} render={() => <User/>}/>\n          <Route path={'/login'} render={() => <Login/>}/>\n          <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n          <Redirect from={'*'} to={'/404'}/>\n        </Switch>\n      </Container>\n      <ErrorSnackbar/>\n    </div>\n  );\n}\n\n","import thunk from \"redux-thunk\";\r\nimport {combineReducers, configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {userReducer} from \"../features/User/user-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  auth: authReducer,\r\n  user: userReducer\r\n})\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './app/App';\nimport './index.css';\nimport {store} from \"./app/store\";\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}